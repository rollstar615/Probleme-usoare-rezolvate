def palindrom(nr):
    "verifica daca un nr e palindrom, prin folosirea unei auxiliare m care intoarce numarul si verifica daca auxiliara e egala cu nr"
    "return daca true ,return false daca nu e "
    m = nr
    a=0
    while nr!=0:
        a=a*10+nr%10
        nr=nr//10
    if m==a:
        return True
    else:
        return False

def test_palindrom():
    assert palindrom(22)==True
    assert palindrom(3)==True
    assert palindrom(25)==False
test_palindrom()


def binar(n):
    "calculeaza cati nr de 1 are in reprezentare binara stocandu i in k de fiecare data cand un 1 apare"
    "int:n"
    "output k"
    k=0
    while n>0:
        if n%2==1:
            k=k+1
        n=n//2
    return k

def numar_biti():
    assert binar(3)==2
    assert binar(1)==1
    assert binar(10)==2
numar_biti()

def read_list():
    lista = []
    nr=int(input("Cate numere doriti: "))
    for i in range(nr):
        lista.append(int(input("dati al {}-lea numar: ".format(i+1))))
    return lista
def lista_palindrom(lista):
    "2 liste goale temp si rezultat, fiind subsir este sters tot timpul daca urm termen nu are propr"
    "daca lungimea lui temp>rez rezultatul devine temp"
    "int lista simpla"
    "output: rezultat"
    rezultat = []
    temp = []
    for i in range(len(lista)):
        if palindrom(lista[i])==True:
            temp.append(lista[i])
        else:
            temp.clear()
        if len(temp) > len(rezultat):
            rezultat = temp[:]
    return rezultat

def verif_lista_palindrom():
    assert lista_palindrom([22,33,55,10,43,34])==[22,33,55]
    assert lista_palindrom([9,7,10,22,11,33,55,44,20])==[22,11,33,55,44]
    assert lista_palindrom([20,10,15,11])==[11]
verif_lista_palindrom()

def afisare_palindrom(lista):
    'functie de afisare a listei'
    lista_afisare=lista_palindrom(lista)
    print("numerele palindroame sunt", lista_afisare)
def lista_binar(lista):
    "mod analog ca la palindrom doar ca facem apel functiei de binar si primul termen si nr de biti ai primului trebuie stocati "
    "pt a avea un punct de comparatie din start"
    "int:lista"
    "output rezultat"
    rezultat = []
    temp = []
    k=binar(lista[0])
    temp.append(lista[0])
    for i in range(1, len(lista)):
        if binar(lista[i])==k:
            temp.append(lista[i])
        else:
            temp.clear()
            k=binar(lista[i])
            temp.append(lista[i])

        if len(temp)>len(rezultat):
            rezultat=temp[:]
    return rezultat

def verif_lista_binar():
    assert lista_binar([3,3,3,10,100,24,33,55,23])==[3,3,3,10]
    assert lista_binar([3,5,7,9,11,9,7,5,3])==[3,5]
verif_lista_binar()

def afisare_binar(lista):
    "functie de afisare lista binar"
    lista_afisar=lista_binar(lista)
    print("numerele binare sunt: ", lista_afisar)

def lista_indici_palindrom(lista):
    "se face o lista din indicii aferenti listei"
    "int lista"
    "output:rezultat"
    rezultat = []
    temp = []
    for i in range(len(lista)):
        if palindrom(lista[i])==True:
            temp.append(i)
        else:
            temp.clear()
        if len(temp) > len(rezultat):
            rezultat = temp[:]
    return rezultat

def verificare_indice_palindrom():
    assert lista_indici_palindrom([22,11,33,44,200,300])==[0,1,2,3]
    assert lista_indici_palindrom([5,7,100,200,305,303])==[0,1]
verificare_indice_palindrom()

def afisare_indice(lista):
    "se printeaza primul termen al listei indicilor si ultimul termen"
    lista_indice=lista_indici_palindrom(lista)
    print (lista_indice[0])
    i=len(lista_indice)-1
    print(lista_indice[i])

def lista_indici_binar(lista):
    "analog ca pentru lista palindrom"
        rezultat = []
        temp = []
        k = binar(lista[0])
        temp.append(0)
        for i in range(1, len(lista)):
            if binar(lista[i]) == k:
                temp.append(i)
            else:
                temp.clear()
                k = binar(lista[i])
            if len(temp) > len(rezultat):
                rezultat = temp[:]
        return rezultat

def verificare_lista_binar():
    assert lista_indici_binar([3,3,3,3,3,3])==[0,1,2,3,4,5]
    assert lista_indici_binar([3,5,9,4,200,500])==[0,1,2]

def afisare_indic(lista):
    "analog ca pentru lista palindrom"
    lista_indic=lista_indici_binar(lista)
    print(lista_indic[0])
    i=len(lista_indic)-1
    print(lista_indic[i])

def patrat_perfect(nr):
    for i in range(nr):
        if nr==i*i:
            return True
        if nr==1 or nr==0:
            return True


def lista_patrate(lista):
    rezultat=[]
    temp=[]
    for i in range(len(lista)):
        if patrat_perfect(lista[i])==True:
            temp.append(lista[i])
        else:
            temp.clear()
        if len(temp)>len(rezultat):
            rezultat=temp[:]
    return rezultat

def verificare_patrat():
    assert lista_patrate([1,4,9,300])==[1,4,9]
    assert lista_patrate([25,36,205,36,4,1,36])==[36,4,1,36]
verificare_patrat()

def afisare_patrat(lista):
    lista_pa=lista_patrate(lista)
    print("cea mai lunga subsecventa de patrate perfecte: ", lista_pa)

def numere_prime(nr):
    k=0
    if nr==0 or nr==1:
        return False
    if nr==2 or nr==3:
        return True
    i=2
    while nr>i:
        if nr%i==0:
            k=1
            return False
        i=i+1
    if k==0:
        return True

def lista_prime(lista):
    temp=[]
    rezultat=[]
    for i in range(len(lista)):
        if numere_prime(lista[i])==True:
            temp.append(lista[i])
        else:
            temp.clear()
        if len(temp)>len(rezultat):
            rezultat=temp[:]
    return rezultat

def verificare():
    assert(numere_prime(3))==True
    assert(numere_prime(2))==True
    assert(numere_prime(5))==True
def verificare_prime():
    assert(lista_prime([2,3,5,24,23,22]))==[2, 3, 5]
    assert(lista_prime([3,5,7,2,21,22,23,5,7,8]))==[3,5,7,2]
verificare_prime()

def afisare_lista_prime(lista):
    lista_primel=lista_prime(lista)
    print("lista prime este: ", lista_primel)

def semn_numar(nr):
    if nr<0:
        k=1
        return k
    if nr>0:
        k=0
        return k

def lista_semne(lista):
    temp=[lista[0]]
    rezultat=[]
    w=semn_numar(lista[0])
    for i in range(1, len(lista)):
        if semn_numar(lista[i])==w:
            temp.clear
            w=semn_numar(lista[i])
            temp=[lista[i]]
        else:
            temp.append(lista[i])
            w=semn_numar(lista[i])
        if len(temp)>len(rezultat):
            rezultat=temp[:]
    return rezultat

def verificare_semn():
    assert lista_semne([1,-1,3,5,6,7])==[1,-1,3]
    assert lista_semne([1,-3,3,-5,-6,-5])==[1,-3,3,-5]
verificare_semn()
def afisare_semn(lista):
    afisare_semnu=lista_semne(lista)
    print("numerele cu semne alternante sunt: ", afisare_semnu)

def lista_crescatoare(lista):
    temp=[lista[0]]
    rezultat=[]
    k=lista[0]
    for i in range(1, len(lista)):
        if k<lista[i]:
            temp.append(lista[i])
            k=lista[i]
        else:
            temp.clear()
            k=lista[i]
            temp.append(lista[i])
        if len(temp)>len(rezultat):
            rezultat=temp[:]
    return rezultat

def verificare_lista():
    assert lista_crescatoare([1,2,3,4,5,3,4,5])==[1,2,3,4,5]
    assert lista_crescatoare([2,4,20,35,43,2,3,4,5,6,1,1])==[2,4,20,35,43]
verificare_lista()

def afisare_verificare(lista):
    afis=lista_crescatoare(lista)
    print("lista este", afis)

def divizor(nr,n):
    if nr%n==0:
        return True

def lista_divizor(lista):
    temp=[]
    rezultat=[]
    divi=int(input("numarul care sa divida e: "))
    for i in range(len(lista)):
        if lista[i]%divi==0:
            temp.append(lista[i])
        else:
            temp.clear()
        if len(temp)>len(rezultat):
            rezultat=temp[:]
    return rezultat

def afisare_divizor(lista):
    afis_divi=lista_divizor(lista)
    print("lista de divizori e:", afis_divi)

def lista_neprime(lista):
    temp=[]
    rezultat=[]
    for i in range(len(lista)):
        if numere_prime(lista[i])==False:
            temp.append(lista[i])
        else:
            temp.clear()
        if len(temp)>len(rezultat):
            rezultat=temp[:]
    return rezultat

def verifi():
    assert lista_neprime([2,3,4,6,8,23])==[4,6,8]
    assert lista_neprime([20,3,5,6,8,25,3])==[6,8,25]
verifi()

def afisare_neprime(lista):
    afisier=lista_neprime(lista)
    print("numerele neprime sunt", afisier)

def suma_prim(lista):
    temp=[]
    rezultat=[]
    suma=0
    if numere_prime(lista[0])==True:
        temp.append(lista[0])
        suma=lista[0]
    for i in range(1, len(lista)):
        suma=suma+lista[i]
        if numere_prime(suma)==True:
            temp.append(lista[i])
        else:
            temp.clear()
            suma=lista[i]
        if len(temp)>len(rezultat):
            rezultat=temp[:]
    return rezultat

def verificare_suma():
    assert suma_prim([2,3,2,10,6,4,3,4,4])==[2,3,2,10,6]
    assert suma_prim([1,2,3,2,2,1,2])==[2,3,2]
verificare_suma()

def afisare_suma(lista):
    listuca=suma_prim(lista)
    print("numerele prime sumasunt ", listuca)

def produs_impar(lista):
    temp=[]
    rezultat=[]
    for i in range(len(lista)):
        if lista[i]%2==1:
            temp.append(lista[i])
        else:
            temp.clear()
        if len(temp)>len(rezultat):
            rezultat=temp[:]
    return rezultat

def verificare_produs():
    assert produs_impar([1,3,5,6,7,3])==[1,3,5]
    assert produs_impar([3,5,7,9,11,2,23,11,3,22])==[3,5,7,9,11]
verificare_produs()

def afisare_impar(lista):
    listel=produs_impar(lista)
    print("produsul numerele", listel)

def divizori(nr):
    k=0
    for i in range(1, nr):
        if nr%i==0:
            k=k+1
    return k

def listu(lista):
    temp=[lista[0]]
    rezultat=[]
    li=divizori(lista[0])
    for i in range(1,len(lista)):
        if divizori(lista[i])==li:
            temp.append(lista[i])
        else:
            temp.clear()
            li=divizori(lista[i])
        if len(temp)>len(rezultat):
            rezultat=temp[:]
    return rezultat

def ver():
    assert listu([7,2,3,5,22,33,44])==[7,2,3,5]
    assert listu([22,33,55,77,3,5,7])==[22,33,55,77]
ver()

def afisu(lista):
    lista_divizori=listu(lista)
    print("afisam numerele: ", lista_divizori)

def cifre(nr):
    k=1
    while nr>0:
        w=nr%10
        if numere_prime(w)==True:
            k=1
        else:
            k=0
            return False
        nr=nr//10
    if k==1:
        return True

def lista_cifre(lista):
    temp=[]
    rezultat=[]
    for i in range(len(lista)):
        if cifre(lista[i])==True:
            temp.append(lista[i])
        else:
            temp.clear()
        if len(temp)>len(rezultat):
            rezultat=temp[:]
    return rezultat

def veri():
    assert lista_cifre([22,33,55,234, 32,75])==[22,33,55]
veri()

def afi(lista):
    a=lista_cifre(lista)
    print("nr sunt ", a)

def show_menu():
    print("1.Citire Lista: ")
    print("2.Afisare numere cu proprietate 1: ")
    print("3.Afisare numere cu proprietate 2: ")
    print("4.Afisare indici de la proprietate 1")
    print("5.Afisare indici de la proprietate 2")
    print("6.Afisare numere cu proprietate 3")
    print("7.Afisare numere cu proprietate 4")
    print("8.Afisare numere cu proprietate 5")
    print("9.Afisare numere cu proprietate 6")
    print("10.Afisare numere cu proprietate 7")
    print("11.Afisare numere cu proprietatea 8")
    print("12.Afisare numere cu proprietatea 9")
    print("13.Afisare numere cu proprietatea 10")
    print("14.Afisare numere cu proprietatea 11")
    print("15.Afisare numere cu proprietatea 12")
    print("16.Afisare numere cu proprietatea 13")
    print("17.Afisare numere cu x la k citit")
    print("x.Iesire ")

def interface():
    lista = []
    while True:
        show_menu()
        op = input("Optiune: ")
        if op == "1":
            lista = read_list()
        elif op == "2":
            afisare_palindrom(lista)
        elif op=="3":
            afisare_binar(lista)
        elif op=="4":
            afisare_indice(lista)
        elif op=="5":
            afisare_indic(lista)
        elif op=="6":
            afisare_patrat(lista)
        elif op=="7":
            afisare_lista_prime(lista)
        elif op=="8":
            afisare_semn(lista)
        elif op=="9":
            afisare_verificare(lista)
        elif op=="10":
            afisare_divizor(lista)
        elif op=="11":
            afisare_neprime(lista)
        elif op=="12":
            afisare_suma(lista)
        elif op=="13":
            afisare_impar(lista)
        elif op=="14":
            afisu(lista)
        elif op=="15":
            afi(lista)
        elif op == "x":
            break
        else:
            print("invalid")
interface()




4+1+10+2=17+16

